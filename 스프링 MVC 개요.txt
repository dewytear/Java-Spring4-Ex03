[스프링 MVC 흐름과 주요 구성 컴포넌트]

	1) client				------>		Dispatcher Servlet
		- 요청을 수신

	2) Dispatcher Servlet	------>		Handler Mapping
		- Handler Mapping이 컨트롤러 정의(Controller를 정해줌) : 컨트롤러를 지정해주는 컨트롤러

	3) Dispatcher Servlet	------>		Handler Adapter
		- Handler Adapter가 요청을 Controller에게 전송

	4) Controller(handler)	------>		Handler Adapter
		- 요청 결과와 View에 대한 정보를 return

	5) Handler Adapter		------>		Dispatcher Servlet
		- [Model & View] 객체를 만들어서 전달

	6) Dispatcher Servlet	------>		View Resolver
		- 응답할 View를 요청

	7) Dispatcher Servlet	------>		View
		- View를 이용해서 응답

	핸들러 == 컨트롤러
	핸들러 매핑		------>		핸들러 어댑터(일대일 매핑)를 찾아서 컨트롤러를 부른다.


[컨트롤러 제작 순서]
최초의 클라이언트의 요청이 들어오면 컨트롤러로 진입을한다.
컨트롤러는 요청에 대한 작업처리를 한 후에 View에 데이터를 전달한다.

	1) @Controller를 이용한 클래스 생성
	2) @RequestMapping을 이용한 요청경로를 매핑
	3) 요청 처리 메소드를 구현(요청처리 메소드 제작)
	4) 뷰이름을 리턴


[ModelAndView 객체를 이용한 데이터 전달]

	1) ModelAndView 객체를 생성
	2) model 객체에 데이터를 추가
	3) 뷰이름을 설정(setViewName()을 이용)


[PATH Variable 를 받아와 View에 전달]
	@RequestMapping 어노테이션 값으로 {템플릿변수} 를 사용

	1) @PathVariable 어노테이션을 이용해서 {템플릿 변수} 와 동일한 이름을 갖는 파라미터를 추가
	2) RequestMapping 어노테이션에 변수를 포함
	3) 이들 변수는 @PathVariable 어노테이션이 적용된 동일한 이름을 갖는 파라미터에 매핑

	null이나 공백값이 들어가는 parameter라면 적용하지 말도록!
	Spring 에서 @PathVariable 사용하여 값을 넘겨받을때 값에 . 가 포함되어 있으면 .포함하여 그뒤가 잘려서 들어온다


[Request요청: GET방식, POST방식]
Request요청을 보낼때 GET방식으로 하는방법과 POST 방식으로 하는 방법이 있다.

	- 만약 GET, POST 상관없이 Controller의 로직을 수행하게 하고 싶다면,
		@RequestMapping의 method 부분을 지우면 된다.

	- GET방식 (Idempotent) 주로 조회를 할 때에 사용
		= GET은 요청을 전송할 때 필요한 데이터를 Body에 담지 않고, 쿼리스트링을 통해 전송
		= 불필요한 요청을 제한하기 위해 요청이 캐시될 수 있음
		= 헤더에 붙어서 전송이 되기 때문에, 도메인주소를 보면 내가 입력한 값이 노출 됨
		+ URL에 요청 파라미터를 가지고 있기 때문에 링크를 걸 때, URL에 파라미터를 사용해 더 디테일하게 페이지를 링크할 수 있다.

	- POST방식 (Non-idempotent) 생성에는 POST, 수정은 PUT 또는 PATCH, 삭제는 DELETE
		= 패킷안에 숨겨져서 전송 됨(HTTP 메세지의 Body에 담아서 전송)
		= GET과 달리 대용량 데이터를 전송
		= 요청 헤더의 Content-Type에 요청 데이터의 타입을 표시해야함

	* Idempotent(멱등冪等) : 연산의 한 성질을 나타내는 것으로, 연산을 여러 번 적용하더라도 결과가 달라지지 않는 성질


[ModelAttribute]



